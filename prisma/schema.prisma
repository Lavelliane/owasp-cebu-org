// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(MEMBER)
  points        Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  submissions   Submission[]
  solvedCTFs    SolvedCTF[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CTF {
  id          String   @id @default(cuid())
  title       String
  description String    @db.Text
  hint        String?   @db.Text
  link        String?
  category    String
  flag        String
  score       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  submissions Submission[]
  solvedBy    SolvedCTF[]
}

// Track all submission attempts
model Submission {
  id        String    @id @default(cuid())
  flag      String
  correct   Boolean
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  ctf       CTF       @relation(fields: [ctfId], references: [id], onDelete: Cascade)
  ctfId     String
}

// Track which CTFs a user has solved
model SolvedCTF {
  id        String    @id @default(cuid())
  startedAt DateTime  @default(now())
  solvedAt  DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  ctf       CTF       @relation(fields: [ctfId], references: [id], onDelete: Cascade)
  ctfId     String

  @@unique([userId, ctfId])
}
